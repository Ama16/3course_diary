{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "import math\n",
    "from sklearn.metrics import roc_auc_score\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def scoring_gbc_sklearn(X_train, y_train, X_test, y_test, n_estimators=100, \n",
    "                        learning_rate=0.5, max_depth=4, random_state=0, max_features=None,\n",
    "                        min_samples_leaf=1, verbose=True):\n",
    "    scores_train = []\n",
    "    scores_test = []\n",
    "    iterations = []\n",
    "    weight_0 = 1\n",
    "    weight_1 = (len(y_train) - y_train.sum())/y_train.sum()\n",
    "    sample_weights = [weight_1 if i else weight_0 for i in y_train]\n",
    "    log_iters = list(set((np.logspace(math.log(1, 8), math.log(400, 8), \n",
    "                                      num=50, endpoint=True, base=8, \n",
    "                                      dtype=np.int))))\n",
    "    log_iters.sort()\n",
    "    for i in log_iters:\n",
    "        model = GradientBoostingClassifier(n_estimators=i, learning_rate=learning_rate, \n",
    "                                          max_depth=max_depth, random_state=random_state,\n",
    "                                          min_samples_leaf=min_samples_leaf, max_features=max_features)\n",
    "        model.fit(X_train, y_train, sample_weight=sample_weights)\n",
    "        y_train_pred_scores = model.predict_proba(X_train)\n",
    "        y_test_pred_scores = model.predict_proba(X_test)\n",
    "        scores_train.append(roc_auc_score(y_train, y_train_pred_scores[:,1]))\n",
    "        scores_test.append(roc_auc_score(y_test, y_test_pred_scores[:,1]))\n",
    "        iterations.append(i)\n",
    "        \n",
    "    best_score = max(scores_test)\n",
    "    best_iter = iterations[scores_test.index(best_score)]\n",
    "    if verbose:\n",
    "        print('Best score: {}\\nBest iter: {}'.format(best_score, best_iter))\n",
    "    return scores_train, scores_test, iterations, model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "from sklearn import preprocessing\n",
    "\n",
    "class LabelEncoder(BaseEstimator, TransformerMixin):\n",
    "    def __init__(self, cols=None, drop_invariant=False):\n",
    "        self.cols = cols\n",
    "        self.drop_invariant = drop_invariant\n",
    "        \n",
    "    def fit(self, X, y=None):\n",
    "        if self.drop_invariant:\n",
    "            self.drop = []\n",
    "            for i in self.cols:\n",
    "                if len(X[i].unique()) == 1:\n",
    "                    self.drop.append(i)\n",
    "            for i in self.drop:\n",
    "                self.cols.remove(i)\n",
    "        self.le = []\n",
    "        for i in self.cols:\n",
    "            self.le.append(preprocessing.LabelEncoder().fit(X[i]))\n",
    "        return self   \n",
    "        \n",
    "    def transform(self, X):\n",
    "        if self.drop_invariant:\n",
    "            X = X.drop(self.drop, axis=1)\n",
    "        \n",
    "        for i, j in zip(self.cols, self.le):\n",
    "            X.loc[:, i+'_le'] = j.transform(X[i])\n",
    "        X = X.drop(self.cols, axis=1)\n",
    "        \n",
    "        return X\n",
    "    \n",
    "    def get_feature_names(self):\n",
    "        return [(i+'_le') for i in self.cols]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "\n",
    "class FrequencyEncoder(BaseEstimator, TransformerMixin):\n",
    "    def __init__(self, cols=None, drop_invariant=False, handle_unknown='value', handle_missing='value'):\n",
    "        self.cols = cols\n",
    "        self.drop_invariant = drop_invariant\n",
    "        self.handle_unknown = handle_unknown\n",
    "        self.handle_missing = handle_missing\n",
    "        \n",
    "    def fit(self, X, y=None):\n",
    "        if self.drop_invariant:\n",
    "            self.drop = []\n",
    "            for i in self.cols:\n",
    "                if len(X[i].unique()) == 1:\n",
    "                    self.drop.append(i)\n",
    "            for i in self.drop:\n",
    "                self.cols.remove(i)\n",
    "        self.maps = []\n",
    "        for i in self.cols:\n",
    "            self.maps.append(X.groupby(i).size() / len(X))\n",
    "        return self   \n",
    "        \n",
    "    def transform(self, X):\n",
    "        if self.drop_invariant:\n",
    "            X = X.drop(self.drop, axis=1)\n",
    "        \n",
    "        if self.handle_missing == 'error':\n",
    "            if X[self.cols].isnull().any().any():\n",
    "                raise ValueError('Columns to be encoded can not contain null')\n",
    "        \n",
    "        for i, j in zip(self.cols, self.maps):\n",
    "            X.loc[:, i+'_freq'] = X[i].map(j)\n",
    "        X = X.drop(self.cols, axis=1)\n",
    "        \n",
    "        if self.handle_unknown == 'error':\n",
    "            if X[[(i+'_freq') for i in self.cols]].isnull().any().any():\n",
    "                raise ValueError('Columns contain unexpected value')\n",
    "        \n",
    "        X[[(i+'_freq') for i in self.cols]] = X[[(i+'_freq') for i in self.cols]].fillna(0)\n",
    "        \n",
    "        return X\n",
    "    \n",
    "    def get_feature_names(self):\n",
    "        return [(i+'_freq') for i in self.cols]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "class TargetEncoder(BaseEstimator, TransformerMixin):\n",
    "    \n",
    "    def __init__(self, col, method=None, unknown=None, min_samples = 0, smoothing = 0):\n",
    "        self.col = col\n",
    "        self.method = method\n",
    "        \n",
    "        if self.method == None:\n",
    "            self.method = np.mean\n",
    "        self.unknown = unknown\n",
    "        self.smoothing = float(smoothing)\n",
    "        self.min_samples = min_samples\n",
    "        \n",
    "    def fit(self, X, y): \n",
    "        \"\"\"\n",
    "        Параметры\n",
    "        ----------\n",
    "        X : Series\n",
    "            Колонка с обучающими значениями\n",
    "        y : Series\n",
    "            Колонка таргета\n",
    "        \"\"\"\n",
    "        col = X[self.col].reset_index(drop=True)\n",
    "        y = y.reset_index(drop=True)\n",
    "        \n",
    "        prior = y.mean()\n",
    "        name = self.method.__name__\n",
    "        stats = y.groupby(col).agg(['count', self.method])\n",
    "        \n",
    "        if self.smoothing > 0:\n",
    "            smoove = 1 / (1 + np.exp(-(stats['count'] - self.min_samples) / self.smoothing))\n",
    "            smoothing = prior * (1 - smoove) + stats[name] * smoove\n",
    "            smoothing[stats['count'] < self.min_samples] = prior #если меньше min_samples, присваиваем общее среднее\n",
    "        \n",
    "        if self.smoothing > 0:\n",
    "            self.d = smoothing\n",
    "            return self\n",
    "        \n",
    "        self.d = dict(zip(np.unique(col), np.zeros(len(np.unique(col)))))\n",
    "        for i in np.unique(col):\n",
    "            if stats['count'][i] < self.min_samples:\n",
    "                self.d[i] = prior\n",
    "            else:\n",
    "                self.d[i] = stats[name][i]\n",
    "        return self\n",
    "        return self\n",
    "    \n",
    "    def transform(self, X):\n",
    "        \"\"\"\n",
    "        Параметры\n",
    "        ----------\n",
    "        X : Series\n",
    "            Колонка с преобразуемыми значениями\n",
    "        \"\"\"\n",
    "        col = X[self.col]\n",
    "        answer = np.empty(len(col))\n",
    "        for k, i in enumerate(X.index):\n",
    "            if col[i] in self.d.keys():\n",
    "                answer[k] = self.d[col[i]]\n",
    "            else:\n",
    "                if self.unknown == None:\n",
    "                    answer[k] = np.mean(list(d.values()))\n",
    "                    #raise Exception(\"Unexpected value\")\n",
    "                else:\n",
    "                    answer[k] = self.unknown\n",
    "        return pd.Series(answer, index=col.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.utils import check_random_state\n",
    "\n",
    "class MyTransformerWithTargetMixin:\n",
    "    def fit_transform(self, X, y=None):\n",
    "        if y is None:\n",
    "            raise TypeError('fit_transform() missing argument: ''y''')\n",
    "        return self.fit(X, y).transform(X, y)\n",
    "\n",
    "class JamesSteinEncoder(BaseEstimator, MyTransformerWithTargetMixin):\n",
    "    def __init__(self, cols=None, random_state=None, randomized=False, sigma=0.05):\n",
    "        self.cols = cols\n",
    "        self.random_state = random_state\n",
    "        self.randomized = randomized\n",
    "        self.sigma = sigma\n",
    "        self.mapping = {}\n",
    "        \n",
    "    def fit(self, X, y): \n",
    "        col = X[self.cols].reset_index(drop=True)\n",
    "        y = y.reset_index(drop=True).astype('float')\n",
    "        prior = y.mean()\n",
    "        global_count = len(y)\n",
    "        global_var = y.var()\n",
    "        \n",
    "        for name_col in self.cols:\n",
    "            stats = y.groupby(col[name_col]).agg(['mean', 'var'])\n",
    "\n",
    "            i_var = stats['var'].fillna(0) \n",
    "\n",
    "            smoothing = i_var / (global_var + i_var) \n",
    "            self.mapping[name_col] = (1 - smoothing)*(stats['mean']) + smoothing*prior\n",
    "        \n",
    "        return self\n",
    "    \n",
    "    \n",
    "    def transform(self, X, y=None):\n",
    "        X_now = X.copy()\n",
    "        for col in self.cols:\n",
    "            X_now[col] = X_now[col].map(self.mapping[col])\n",
    "            \n",
    "            X_now[col].fillna(np.nanmean(X_now[col]), inplace=True)\n",
    "\n",
    "            if self.randomized and y is not None:\n",
    "                random_state_generator = check_random_state(self.random_state)\n",
    "                X_now[col] = (X_now[col] * random_state_generator.normal(1., self.sigma, X_now[col].shape[0]))\n",
    "\n",
    "        return X_now"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "\n",
    "class WoEEncoder(BaseEstimator, TransformerMixin):\n",
    "    def __init__(self, col=None, unknown=None):\n",
    "        self.col = col\n",
    "        self.unknown = unknown\n",
    "        \n",
    "    def fit(self, X, y): \n",
    "        col = X[self.col].reset_index(drop=True)\n",
    "        y = y.reset_index(drop=True)\n",
    "        \n",
    "        \n",
    "        data = pd.DataFrame(pd.concat([col, y], axis=1))\n",
    "        name = data.columns[1]\n",
    "        tmp = pd.DataFrame(data.groupby(col)[name].count())[name]\n",
    "        data = pd.DataFrame(data.groupby(col)[name].sum())\n",
    "        data['not_target'] = tmp - data[name]\n",
    "        data['answer'] = np.log((data[name] + 0.5) / (data['not_target'] + 0.5))\n",
    "        self.d = dict(data['answer'])\n",
    "        \n",
    "        return self\n",
    "    \n",
    "    def transform(self, X):\n",
    "        col = X[self.col]\n",
    "        answer = np.empty(len(col))\n",
    "        for k, i in enumerate(X.index):\n",
    "            if col[i] in self.d.keys():\n",
    "                answer[k] = self.d[col[i]]\n",
    "            else:\n",
    "                if self.unknown == None:\n",
    "                    raise Exception(\"Unexpected value\")\n",
    "                else:\n",
    "                    answer[k] = self.unknown\n",
    "        return pd.Series(answer, index=col.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.read_csv('/Users/ama/Desktop/avazu-ctr-prediction/train', nrows=150000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_enc(X, y):\n",
    "    plt.figure(figsize =(8,5))\n",
    "    \n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "    js = JamesSteinEncoder(cols=X_train.columns, randomized=False, sigma=0.02)\n",
    "    X_train = js.fit_transform(X_train, y_train)\n",
    "    X_test = js.transform(X_test)\n",
    "    scores_train, scores_test, iterations, model = scoring_gbc_sklearn(X_train, y_train, X_test, y_test)\n",
    "    print(\"James Stein encoding:\")\n",
    "    plt.plot(iterations, scores_test, label='James Stein encoding')\n",
    "    \n",
    "    le = LabelEncoder(X.columns)\n",
    "    x = le.fit_transform(X)\n",
    "    X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n",
    "    print(\"Label encoding:\")\n",
    "    scores_train, scores_test, iterations, model = scoring_gbc_sklearn(X_train, y_train, X_test, y_test)\n",
    "    plt.plot(iterations, scores_test, label='Label encoding')\n",
    "\n",
    "    fe = FrequencyEncoder(X.columns)\n",
    "    x = fe.fit_transform(X.copy())\n",
    "    X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n",
    "    print(\"Frequency encoding:\")\n",
    "    scores_train, scores_test, iterations, model = scoring_gbc_sklearn(X_train, y_train, X_test, y_test)\n",
    "    plt.plot(iterations, scores_test, label='Frequency encoding')\n",
    "  \n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "    for i in X.columns:\n",
    "        te = TargetEncoder(i, smoothing = 0, unknown=0.2)\n",
    "        X_train[i] = te.fit_transform(X_train, y_train)\n",
    "        X_test[i] = te.transform(X_test)\n",
    "    print(\"Target encoding, smoothing=0\")\n",
    "    scores_train, scores_test, iterations, model = scoring_gbc_sklearn(X_train, y_train, X_test, y_test)\n",
    "    plt.plot(iterations, scores_test, label='Target encoding, smoothing=0')\n",
    "    \n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "    for i in X.columns:\n",
    "        te = TargetEncoder(i, smoothing = 1, unknown=0.2)\n",
    "        X_train[i] = te.fit_transform(X_train, y_train)\n",
    "        X_test[i] = te.transform(X_test)\n",
    "    print(\"Target encoding, smoothing=1:\")\n",
    "    scores_train, scores_test, iterations, model = scoring_gbc_sklearn(X_train, y_train, X_test, y_test)\n",
    "    plt.plot(iterations, scores_test, label='Target encoding, smoothing=1')\n",
    "    \n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "    for i in X.columns:\n",
    "        te = TargetEncoder(i, smoothing = 2, unknown=0.2)\n",
    "        X_train[i] = te.fit_transform(X_train, y_train)\n",
    "        X_test[i] = te.transform(X_test)\n",
    "    scores_train, scores_test, iterations, model = scoring_gbc_sklearn(X_train, y_train, X_test, y_test)\n",
    "    print(\"Target encoding, smoothing=2:\")\n",
    "    plt.plot(iterations, scores_test, label='Target encoding, smoothing=2')\n",
    "    \n",
    "    \n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "    for i in X.columns:\n",
    "        woe = WoEEncoder(i, unknown=-0.7)\n",
    "        X_train[i] = woe.fit_transform(X_train, y_train)\n",
    "        X_test[i] = woe.transform(X_test)\n",
    "    print(\"WoE encoding:\")\n",
    "    scores_train, scores_test, iterations, model = scoring_gbc_sklearn(X_train, y_train, X_test, y_test)\n",
    "    plt.plot(iterations, scores_test, label='WoE encoding')\n",
    "    \n",
    "\n",
    "    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n",
    "    plt.savefig('avazu.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = train['click']\n",
    "train.drop(columns=['id', 'click'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best score: 0.7156658284291065\n",
      "Best iter: 39\n",
      "James Stein encoding:\n",
      "Label encoding:\n",
      "Best score: 0.7374053849694584\n",
      "Best iter: 217\n",
      "Frequency encoding:\n",
      "Best score: 0.7452327438074877\n",
      "Best iter: 217\n",
      "Target encoding, smoothing=0\n",
      "Best score: 0.7178396945674205\n",
      "Best iter: 34\n",
      "Target encoding, smoothing=1:\n",
      "Best score: 0.7216627026635928\n",
      "Best iter: 21\n",
      "Best score: 0.7187671198816763\n",
      "Best iter: 133\n",
      "Target encoding, smoothing=2:\n",
      "WoE encoding:\n",
      "Best score: 0.7274254161184601\n",
      "Best iter: 18\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_enc(train, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
